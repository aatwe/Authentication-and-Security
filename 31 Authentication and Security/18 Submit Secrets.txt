What happens after we login? static page with 1 secret

Objective : Submit a secret and see all other's secrets

1) Create submit route
2) if req.auth is true -> take to submit page
	if not logged in redirect to login
3) Test: 
	//Secrets
	Submit a secret
	login as local user
	//Secrets -> Submit a secret => Submit page
	Type your secret: "My fav color is blue" 
	Submit btn (in submit.ejs -> submit button completes form -> makes post request /submit route)
	Posts to POST/submit route

	What is inside submit get route? if authenticated , render submit page

	Where will we save the user typed secret?	app.post("/submit", function(req,res){
	const submittedSecret = req.body.secret
	})

4) Track who the current user is(one submitting the secret)?
	Passport saves user details
	When new login session initiated => User detail saved in req
	How to know current user? console.log(req.user);	

5) Test
	Go to home page ->
	  Login user local strategy
		//Secrets
		Type your secret
		Submit secret -> console.log(req.user) triggered
			id: sdf546s5df4s6
			username: a@b,com
			_v: 0		//Salt and Hash not there Why?

5( Store secret in DB
	Add field to schema
	 secret: String
		After user makes Post request ---> Find user using req.user.id
   Search for User -> if user found update user secret in schema with secret from input form
	redirect to secrets page
		
		User.findById(req.user.id, function(err, foundUser){
			if(err){
			  console.log(err);
		} else {
			if(foundUser) {
				foundUser.secret = submittedSecret;
				foundUser.save(function(){
					res.redirect("/secrets");
})
}
}
})

6) TEST
Login	//server restart -> session + cookie wiped out
submit a secret: My favourite color is blue
	Submit
///Check
	Users -> View documents -> secret: My favourite color is blue


7) Render all secrets on page

	i.e update app.get("/secrets")
	
	//Any body logged in/ not logged in can see secrets
	Find all secrets on DB	//all places where secret field has value
		User.find({"secret": {$ne: null}})


8) Replae secret text  in secrets.ejs with secret from database
	<h1 class="display-3"> You've Discovered my secret!</h1>
	//How to pick up all users
	<% usersWithsecrets.forEach(function(user){  %>	//mark out parts of files that are JS
		
	<p class="secret-text"><%=user.secret%></p>	//each user that has a secret  -> render inside paragraph tag
<% })%>

9)  TEST
	Sign up with Google
	//Secrets
	My favourite color is blue.

	Dont keep your secrets, share them anonymously
	-> //input Jack bauer is my hero
	//Submit a secret 
	My favourite color is blue.
	Jack bauer is my hero
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
require('dotenv').config();
const express = require("express");
const bodyParser = require("body-parser");
const ejs = require("ejs");
const mongoose = require("mongoose");
const session = require('express-session');
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose");
const GoogleStrategy = require('passport-google-oauth20').Strategy;		//User oAuth package as a strategy
const findOrCreate = require('mongoose-findorCreate');

const app = express();

app.use(express.static("public"));
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({
   extended:true
}))

//Setup session package here before mongo connect
app.use(session({
  secret: "Our little secret. "	//We keep this in environment file but workaround rn 
  resave: false,		//documentation
  saveIninitialized: false	//documentation
}))

//initialize session	//Check passport configure documentation
app.use(passport.initialize());
app.use(passport.session());


mongoose.connect("mongodb://localhost:27017userDB", {useNewUrlParser: true});
mongoose.set(:useCreateIndex", true);	//for Deprecation warning
const userSchema = new mongoose.Schema ({
  email: String,
  password: String
  googleId: String			//Add GoogleId for linking database user to authenticated / profile user id
  secret: String			//Add secret field to Schema 
});

//Plugin to Hash and Salt passwords	//Save users in mongoDB database
userSchema.plugin(passportLocalMongoose);	
userSchema.plugin(findOrCreate);

const User = new mongoose.model("User", userSchema)

//Passport Local configurations	//
passport.use(User.createStrategy());

//Replace below serializers with updated serializers
/*passport.serializeUser(User.serializeUser());	//Creates fortune cookie, puts message
//passport.deserializeUser(User.deserializeUser());  // Passport can decrumble cookiie and discover mesage*/
passport.serializeUser(function(user,done){

}0
passport/deserializeUser(function(id, done){
  User.findById(id, function(err,user){
	done(err, user);
})
})


//Setup Google Strategy //Documentation

passport.use(new GoogleStrategy({
   client_ID: process.env.CLIENT_ID,
   clientSecret: process.env.CLIENT_SECRET
   callbackURL: "http://localhost:3000/auth/google/secrets",
    userProfileURL: 'https://www.googleapis.com/oauth2/v3/userinfo'	//google+ Deprecation fix	//info will be retrieved from userinfo endpoint //code now future proof
}),
function(accessToken, refreshToken, profile, cb) {			//Google sends back access token
   console.log(profile);						//Try logging profile
   User.findOrCreate({ googleId: profile.id}, function(err,user){		//Finds/Creates user based on googleId
    return cb(err,user);
    })
   }
));

app.get("/auth/google", function(res,res){
  passport.authenticate("google", {scope: ['profile']});				//Authenticate with Google Strategy	//similar to how we did with local strategy
})

app.get(' /auth/google/secrets',						//Authorized redirect URL
	  passport.authenticate('google', {failiureRedirect: '/login' }),	//Authenticate user locally
	    function(req,res) {
		res.redirect("/secrets");

app.get("/", function(req,res){
   res.render("home");
})

app.get("/login", function(req,res){
  res.render("login");
});


app.get("/register", function(req,res){
  res.render("register");
})

//Create secrets route this time
app.get("/secret", functon(req,res){
  if(req.isAuthenticated()){
	res.render("secrets");
}else {
    res.redirect("/login");	//login first before viewing secrets page
}
})
******************
Show Secrets
******************
app.get("/secrets", function(req,res){
User.find({"secret": {$ne: null}},function(err,foundUsers){
  if(err) {
	console.log(err),
} else{
      if(foundUsers)) {
	res.render("secrets", {usersWithSecrets: foundUsers} )		//pass found users as value
}
}


});
});


*****************
Submit Route GET
*****************
app.get("/submit"){
if(req.isAuthenticated()){
	res.render("secrets");
}else {
    res.redirect("/login");	//login first before viewing secrets page
}
})
}
*******************
Submit Route POST
*******************
app.post("/submit", function(req,res){
  const submittedSecret = req.body.secret;	// from input field in form	//tap into after form is submitted using req.body
  console.log(req.user);

User.findById(req.user.id, function(err, foundUser){		//Find User
			if(err){
			  console.log(err);
		} else {
			if(foundUser) {			//If User found update User's secret in db schema with the one we got from input field form //req.body.secret
				foundUser.secret = submittedSecret;
				foundUser.save(function(){		//After secret is stored in
					res.redirect("/secrets");	//redirect to secrets page
		});
	}
}
});
 					
})

//Logout Route
app.get("/logout", function(req,res){
  req.logout();
  res.redirect("/");
});


 
app.post("/register" function(req,res){
 User.register({username: req.body.username}, req.body.password, function(err, user){
	if(err{console.log(err);
	res.redirect("/register");
	} else {
	passport.authenticate("local")(req, res, function(){	//authenticate our user	//logged in
							//Succesfully registered
	  res.redirect("/secrets");	//we didnt have secrets route before.why? we res.render("secrets") through register or login
				//Why redirecting not rendering? if user goes direct to secrets page, they should automatically be able to see it  		
				//User is already logged in
})
})
})				//tap into User model	//register is method from passport local mongoose package
				/?Why we need package? to avoid creating our user and interact with mongoose direct
});				//Once user successfully registered AND succesfully logged in
				Using right credential -> send cookie and tell browser to hold cookie
				//Why browser holds cookie? cookie has information that tells server about user
				i.e req.isAuthenticated() -> info that tells is the user authenticated



app.post("/login", function(req,res){

//Create new user in DB
  const user = new User ({
   username: req.body.username 
   password: req.body.password
})

//How to login this user and authenticate? Passport
req.login(user, function(err){
  if(err) {
     console.log(err);
} else {
     passport.authenticate("local")(req,res,function(){				//Successfully logged in
         res.redirect("/secrets");	//Check in secrets route if authenticated or not
})
}
} )
})