Create user account on MongoDB
Authenticate using level 1 security authentication


1) Create account for user
	Create database of user
	
2) Store email and password in DB / Why? to match when user visits
				Check email against password

	
________________________________________________________________________________
Mongoose + MongoDB

`1) npm i mongoose
   const mongoose = require("mongoose")	//require mongoose
   mongoose.connect("mongodb://localhost:27017/userDB",   {useNewUrlParser: true});			//connect mongoose to mongodb  
										//also add flag to remove warning in console



2) nodemon app.js				//Run app//error -> mongodb server not started yet

3) mongod				//start the DB server

4) nodemon app.js				//Server started on port 3000

5) const userSchema = {			//Setup DB //Create schema //Why schema? to create model //what is schema? JS object with 2 fields
	email: String,
	password: String
};

6) const User = new mongoose.model("User", userSchema)			// Use userSchema to Setup new user model 
									//name of model = User
									Why create user model? to create user data

7) Create users (Register)	//handle register route
    and add to userDB database
   How to create user?
   user has typed email and password -> Submit -> form make post request to /register route -> Catch

  How to catch post request?	//2 inputs: type1 = email, type2 = password
				            username	      password
How to create user? using user model
//Render secrets page only when user logged in /registered

  app.post("/register", function(req,res){
   const newUser = new User ({
    email:  req.body.username
    password: req.body.password
});
	
  newUser.save(function(err){					//if any error when trying to save user -> send in callback
   if(err){
	console.log(err);
} else{
	res.render("Secrets");				//Render secrets page only from register and route
}
});
})		 
})

=====================================================
TEST
Email:	1@2.com	
Password:  123
Register -> Secret page rendered


2) Check if data is captured in database
	Robo 3T -> New connection
		localhost:27107
		userDB
	Collections
		users
			ObjectId("asfdas")		//Document 1 
			Email: 1@2.com	
			Password: 123	 
=====================================================
8) Create users (Login)
User goes -> login page -> Enter username + password that was set ---> POST where? Login Route

	Login Form
	<formaction="/login" method="POST">		/form makes post request where? login route
	<div class="form-group">
	  <label for"email">Email</label>
	<input type="email" class="form-control" name="username">
	<div class="form-group">
	  <label for"password">Password</label>
	<input type="password" class="form-control" name="password">
	</div>
	<button type = "submit" class="btn btn-dark">Login</button>
	</form>
	</div>
	<button type="submit" class="btn btn-dark">Login</button>	//Why submit button-> send post request to login route to server
	</form>
	</div>
	</div>
	</div>

//handle login route

app.post("/login", function(req,res){			//handle post route
//  const newUser = new User ({			//NOT creating newUser using model User
    
  const username = req.body.username;		//tap into request params
  const password = req.body.password;
});
//-------------------------------------------------------------------
//Not saving new user here // have to look through database. How? findOne({email: username})	//How to send back user if found/err? callback
/*newUser.save(function(err){				//Save User , send error if any during saving in callback	//saving creates entry in database
   if(err) {						
	console.log(err);
}
   else{
	res.render("secrets");
}*/-------------------------------------------------------------------
User.findOne({email: username}, function(err, foundUser){		//specify condition 
   if(err) {						
	console.log(err);
}
   else{
	if(foundUser)
	  if(foundUser.password === password){		//verifies the correct user //user successfully logged in
		res.render("secrets");
	}
})
});
});
=========================================================================
TEST
1) Save app.js
	localhost:3000
	-> Login	:	Email	: 1@2.com	
			Password: 123
			-> Login
	-> Secret page

What problem? in user collection in document -> password: 123 	//PASSWORD IS VISIBLE

Why is it a problem? If millions user -> plain text -> x employees can look through db and find y's password
If hacker can locate db -> danger
People reuse password -> multiple breach



